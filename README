Приложение - банковские операции.
Приложение реализовано на основе Сервлета. В состав влючен сразу Tomcat-Appache, работает на порту 8080. Контекст приложения - bank/, 
к которому добавляется операции нижеприведеного API (пример хост:8080/bank/api/account?id=1).
Приложение запускается через - docker-compose up и включает в себя также PostgreSQL к качестве БД. При первом запуске в БД создаются необходимые таблицы
и происходит их заполнение начальными данными. Запросы на создание и внесение находятся в папке ресурсов приложения schema.sql и data.scl соответственно.
Первоначально создаются таблицы accounts(cчета), currencies(валюты), banks(банки), clients(клиенты), transaction(транзакции)
Конфигурация приложения задается в файле - application.yml.
В приложении реализован механизм начисления процентов на остаток на конец месяца (п.3 задания). Размер процентной ставки можно задать через 
параметр bank_interest.

Каждая оперция по счету (снятие, пополнение, перевод) сопровождается сохранением в таблице transactions  информации о проведенной операции.
Также по каждой операции сохраняется в файле на диске отдельный check.

Предварительно в папку с ресурсами приложения необходимо положить файл шрифтов, например arial.ttf, чтобы при выводе выписок в формате pdf
отображалась кирилица.

В данном приложении реализован следующий RESTful API:
GET:
  /api/bank?id=номер - получить данные о банке на основании его id в БД
  
  /api/client?id=номер - получить данные о клиенте на основании его id в БД
  
  /api/account,id=номер - получить данные о счете на основании его id в БД
  
  /api/accounts[?page=номер_страницы&size=кол.записей_на_странице&sort=поле_из_account_для_сортировки] - получить список всех счетов. В качестве необязательных 
  параметров можно задать постраничный вывод данных и сортировку по какому-нибудь полю счета
  
  /api/transaction?id=номер - получить данные о транзакции на основании его id в БД

POST:
  /api/bank - создать в системе новый банк. Данные банка передаются в теле запроса в формате JSON в следующем виде:
  {"bankCode" : "CLBKBY22", "bankName" : "Clever-Bank", "address":"Gomel"}

  /api/client - создать в системе нового клиента. Данные о клиенте передаются в теле запроса в формате JSON в следующем виде:
  { "firstName" : "Виктор", "secondName": "Павлович", "surname": "Сидоров-Загорский", "passportNumber": "CI95175363"}

  /api/account - создать в системе новый счет. Данные о счете передаются в теле запроса в формате JSON в следующем виде:
  { "currencyCode" : "BYN", "bankId" = 1, "clientId" = 1}. Валюта также может быть USD или EURO.


  /api/operation/account - операции пополнения или снятия средств со счета. Данные об операции передаются в теле запроса в формате JSON в следующем виде:
  {"sum":10000, "currencyCode": "BYN", "type": 1, "bankCode": "CLBKBY22", "accountNumber":"BY11CLBK181901004"}, где type=0 - снятие средств, 
  а 1 - пополнение счета.
    
  /api/operation/transfer - опреция перевода средств с одного счета на другой (возможны разные клиенты и разные банки, но естетственно они доолжны иметь одну валюту в счете).
   Данные об операции передаются в теле запроса в формате JSON в следующем виде:
   {"sum":5000, "currencyCode": "BYN", "type": 2, "bankCodeFrom": "CLBKBY22", "accountNumberFrom":"BY11CLBK181901003", "bankCodeTo": "ALFABY2X", "accountNumberTo":"BY41ALFA382104006"}
    где type=2 обязательно.
   
  /api/operation/statement - получить банковскую выписку по транзакциям по указанному счету  за указанные период времени (п.12 задания). 
  Данные об операции передаются в теле запроса в формате JSON в следующем виде:
  {"account": "BY11CLBK181901005", "bankCode": "CLBKBY22", "from": "2023-08-01", "to": "2023-09-31", "type": "txt" }. Type может быть txt или pdf - соответственно
  будет выслан результат в необходимом формате (text/plain или application/pdf)
  
  /api/operation/turnover - получить выписку с оборотами по счету за указанные период времени (п.14 задания). 
  Данные об операции передаются в теле запроса в формате JSON в следующем виде:
  {"account": "BY11CLBK181901005", "bankCode": "CLBKBY22", "from": "2023-08-01", "to": "2023-09-31", "type": "txt" }. Type может быть txt или pdf - соответственно
  будет выслан результат в необходимом формате (text/plain или application/pdf)
  
DELETE: 
  /api/bank?id=номер - удалить данные о банке из системы на основании его id в БД.
  
  /api/client?id=номер - удалить данные о клиенте из системы на основании его id в БД.
  
  /api/account?id=номер - удалить данные о счете из системы на основании его id в БД.
  
PUT:
  /api/bank - обновить данные о банке. Данные банка передаются в теле запроса в формате JSON в следующем виде:
  {"id": номер , "bankCode" : "CLBKBY22", "bankName" : "Clever-Bank", "address":"Gomel"}
  
  /api/client - обновить данные о клиенте. Данные банка передаются в теле запроса в формате JSON в следующем виде:
  { "id": номер, "firstName" : "Виктор", "secondName": "Павлович", "surname": "Сидоров-Загорский", "passportNumber": "CI95175363"}
  
  /api/account : обновить данные о клиенте. Данные банка передаются в теле запроса в формате JSON в следующем виде:
  { "id": номер, "accountNumber": "новый номер", "value": сумма на счету в копейках(цента),  "currencyCode" : "BYN", "bankId": id банка, "clientId": id клиента} 
 
Конфигурационый файл paths.yaml содержит соответствия между URI запроса и методом контроллера






